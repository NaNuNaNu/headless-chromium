package protocol

type TouchPoint struct {
	State         string `json:"state"`         // State of the touch point.
	X             int    `json:"x"`             // X coordinate of the event relative to the main frame's viewport.
	Y             int    `json:"y"`             // Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
	RadiusX       int    `json:"radiusX"`       // X radius of the touch area (default: 1).
	RadiusY       int    `json:"radiusY"`       // Y radius of the touch area (default: 1).
	RotationAngle int    `json:"rotationAngle"` // Rotation angle (default: 0.0).
	Force         int    `json:"force"`         // Force (default: 1.0).
	Id            int    `json:"id"`            // Identifier used to track touch sources between events, must be unique within an event.
}

type GestureSourceType string

const GestureSourceTypeDefault GestureSourceType = "default"
const GestureSourceTypeTouch GestureSourceType = "touch"
const GestureSourceTypeMouse GestureSourceType = "mouse"

type DispatchKeyEventParams struct {
	Type                  string `json:"type"`                  // Type of the key event.
	Modifiers             int    `json:"modifiers"`             // Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	Timestamp             int    `json:"timestamp"`             // Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
	Text                  string `json:"text"`                  // Text as generated by processing a virtual key code with a keyboard layout. Not needed for for keyUp and rawKeyDown events (default: "")
	UnmodifiedText        string `json:"unmodifiedText"`        // Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: "").
	KeyIdentifier         string `json:"keyIdentifier"`         // Unique key identifier (e.g., 'U+0041') (default: "").
	Code                  string `json:"code"`                  // Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
	Key                   string `json:"key"`                   // Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
	WindowsVirtualKeyCode int    `json:"windowsVirtualKeyCode"` // Windows virtual key code (default: 0).
	NativeVirtualKeyCode  int    `json:"nativeVirtualKeyCode"`  // Native virtual key code (default: 0).
	AutoRepeat            bool   `json:"autoRepeat"`            // Whether the event was generated from auto repeat (default: false).
	IsKeypad              bool   `json:"isKeypad"`              // Whether the event was generated from the keypad (default: false).
	IsSystemKey           bool   `json:"isSystemKey"`           // Whether the event was a system key event (default: false).
}

type DispatchKeyEventCB func(err error)

// Dispatches a key event to the page.
type DispatchKeyEventCommand struct {
	params *DispatchKeyEventParams
	cb     DispatchKeyEventCB
}

func NewDispatchKeyEventCommand(params *DispatchKeyEventParams, cb DispatchKeyEventCB) *DispatchKeyEventCommand {
	return &DispatchKeyEventCommand{
		params: params,
		cb:     cb,
	}
}

func (cmd *DispatchKeyEventCommand) Name() string {
	return "Input.dispatchKeyEvent"
}

func (cmd *DispatchKeyEventCommand) Params() interface{} {
	return cmd.params
}

func (cmd *DispatchKeyEventCommand) Done(result []byte, err error) {
	if cmd.cb != nil {
		cmd.cb(err)
	}
}

type DispatchMouseEventParams struct {
	Type       string `json:"type"`       // Type of the mouse event.
	X          int    `json:"x"`          // X coordinate of the event relative to the main frame's viewport.
	Y          int    `json:"y"`          // Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
	Modifiers  int    `json:"modifiers"`  // Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	Timestamp  int    `json:"timestamp"`  // Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
	Button     string `json:"button"`     // Mouse button (default: "none").
	ClickCount int    `json:"clickCount"` // Number of times the mouse button was clicked (default: 0).
}

type DispatchMouseEventCB func(err error)

// Dispatches a mouse event to the page.
type DispatchMouseEventCommand struct {
	params *DispatchMouseEventParams
	cb     DispatchMouseEventCB
}

func NewDispatchMouseEventCommand(params *DispatchMouseEventParams, cb DispatchMouseEventCB) *DispatchMouseEventCommand {
	return &DispatchMouseEventCommand{
		params: params,
		cb:     cb,
	}
}

func (cmd *DispatchMouseEventCommand) Name() string {
	return "Input.dispatchMouseEvent"
}

func (cmd *DispatchMouseEventCommand) Params() interface{} {
	return cmd.params
}

func (cmd *DispatchMouseEventCommand) Done(result []byte, err error) {
	if cmd.cb != nil {
		cmd.cb(err)
	}
}

type DispatchTouchEventParams struct {
	Type        string        `json:"type"`        // Type of the touch event.
	TouchPoints []*TouchPoint `json:"touchPoints"` // Touch points.
	Modifiers   int           `json:"modifiers"`   // Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	Timestamp   int           `json:"timestamp"`   // Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
}

type DispatchTouchEventCB func(err error)

// Dispatches a touch event to the page.
type DispatchTouchEventCommand struct {
	params *DispatchTouchEventParams
	cb     DispatchTouchEventCB
}

func NewDispatchTouchEventCommand(params *DispatchTouchEventParams, cb DispatchTouchEventCB) *DispatchTouchEventCommand {
	return &DispatchTouchEventCommand{
		params: params,
		cb:     cb,
	}
}

func (cmd *DispatchTouchEventCommand) Name() string {
	return "Input.dispatchTouchEvent"
}

func (cmd *DispatchTouchEventCommand) Params() interface{} {
	return cmd.params
}

func (cmd *DispatchTouchEventCommand) Done(result []byte, err error) {
	if cmd.cb != nil {
		cmd.cb(err)
	}
}

type EmulateTouchFromMouseEventParams struct {
	Type       string `json:"type"`       // Type of the mouse event.
	X          int    `json:"x"`          // X coordinate of the mouse pointer in DIP.
	Y          int    `json:"y"`          // Y coordinate of the mouse pointer in DIP.
	Timestamp  int    `json:"timestamp"`  // Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970.
	Button     string `json:"button"`     // Mouse button.
	DeltaX     int    `json:"deltaX"`     // X delta in DIP for mouse wheel event (default: 0).
	DeltaY     int    `json:"deltaY"`     // Y delta in DIP for mouse wheel event (default: 0).
	Modifiers  int    `json:"modifiers"`  // Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	ClickCount int    `json:"clickCount"` // Number of times the mouse button was clicked (default: 0).
}

type EmulateTouchFromMouseEventCB func(err error)

// Emulates touch event from the mouse event parameters.
type EmulateTouchFromMouseEventCommand struct {
	params *EmulateTouchFromMouseEventParams
	cb     EmulateTouchFromMouseEventCB
}

func NewEmulateTouchFromMouseEventCommand(params *EmulateTouchFromMouseEventParams, cb EmulateTouchFromMouseEventCB) *EmulateTouchFromMouseEventCommand {
	return &EmulateTouchFromMouseEventCommand{
		params: params,
		cb:     cb,
	}
}

func (cmd *EmulateTouchFromMouseEventCommand) Name() string {
	return "Input.emulateTouchFromMouseEvent"
}

func (cmd *EmulateTouchFromMouseEventCommand) Params() interface{} {
	return cmd.params
}

func (cmd *EmulateTouchFromMouseEventCommand) Done(result []byte, err error) {
	if cmd.cb != nil {
		cmd.cb(err)
	}
}

type SynthesizePinchGestureParams struct {
	X                 int               `json:"x"`                 // X coordinate of the start of the gesture in CSS pixels.
	Y                 int               `json:"y"`                 // Y coordinate of the start of the gesture in CSS pixels.
	ScaleFactor       int               `json:"scaleFactor"`       // Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out).
	RelativeSpeed     int               `json:"relativeSpeed"`     // Relative pointer speed in pixels per second (default: 800).
	GestureSourceType GestureSourceType `json:"gestureSourceType"` // Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
}

type SynthesizePinchGestureCB func(err error)

// Synthesizes a pinch gesture over a time period by issuing appropriate touch events.
type SynthesizePinchGestureCommand struct {
	params *SynthesizePinchGestureParams
	cb     SynthesizePinchGestureCB
}

func NewSynthesizePinchGestureCommand(params *SynthesizePinchGestureParams, cb SynthesizePinchGestureCB) *SynthesizePinchGestureCommand {
	return &SynthesizePinchGestureCommand{
		params: params,
		cb:     cb,
	}
}

func (cmd *SynthesizePinchGestureCommand) Name() string {
	return "Input.synthesizePinchGesture"
}

func (cmd *SynthesizePinchGestureCommand) Params() interface{} {
	return cmd.params
}

func (cmd *SynthesizePinchGestureCommand) Done(result []byte, err error) {
	if cmd.cb != nil {
		cmd.cb(err)
	}
}

type SynthesizeScrollGestureParams struct {
	X                     int               `json:"x"`                     // X coordinate of the start of the gesture in CSS pixels.
	Y                     int               `json:"y"`                     // Y coordinate of the start of the gesture in CSS pixels.
	XDistance             int               `json:"xDistance"`             // The distance to scroll along the X axis (positive to scroll left).
	YDistance             int               `json:"yDistance"`             // The distance to scroll along the Y axis (positive to scroll up).
	XOverscroll           int               `json:"xOverscroll"`           // The number of additional pixels to scroll back along the X axis, in addition to the given distance.
	YOverscroll           int               `json:"yOverscroll"`           // The number of additional pixels to scroll back along the Y axis, in addition to the given distance.
	PreventFling          bool              `json:"preventFling"`          // Prevent fling (default: true).
	Speed                 int               `json:"speed"`                 // Swipe speed in pixels per second (default: 800).
	GestureSourceType     GestureSourceType `json:"gestureSourceType"`     // Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
	RepeatCount           int               `json:"repeatCount"`           // The number of times to repeat the gesture (default: 0).
	RepeatDelayMs         int               `json:"repeatDelayMs"`         // The number of milliseconds delay between each repeat. (default: 250).
	InteractionMarkerName string            `json:"interactionMarkerName"` // The name of the interaction markers to generate, if not empty (default: "").
}

type SynthesizeScrollGestureCB func(err error)

// Synthesizes a scroll gesture over a time period by issuing appropriate touch events.
type SynthesizeScrollGestureCommand struct {
	params *SynthesizeScrollGestureParams
	cb     SynthesizeScrollGestureCB
}

func NewSynthesizeScrollGestureCommand(params *SynthesizeScrollGestureParams, cb SynthesizeScrollGestureCB) *SynthesizeScrollGestureCommand {
	return &SynthesizeScrollGestureCommand{
		params: params,
		cb:     cb,
	}
}

func (cmd *SynthesizeScrollGestureCommand) Name() string {
	return "Input.synthesizeScrollGesture"
}

func (cmd *SynthesizeScrollGestureCommand) Params() interface{} {
	return cmd.params
}

func (cmd *SynthesizeScrollGestureCommand) Done(result []byte, err error) {
	if cmd.cb != nil {
		cmd.cb(err)
	}
}

type SynthesizeTapGestureParams struct {
	X                 int               `json:"x"`                 // X coordinate of the start of the gesture in CSS pixels.
	Y                 int               `json:"y"`                 // Y coordinate of the start of the gesture in CSS pixels.
	Duration          int               `json:"duration"`          // Duration between touchdown and touchup events in ms (default: 50).
	TapCount          int               `json:"tapCount"`          // Number of times to perform the tap (e.g. 2 for double tap, default: 1).
	GestureSourceType GestureSourceType `json:"gestureSourceType"` // Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
}

type SynthesizeTapGestureCB func(err error)

// Synthesizes a tap gesture over a time period by issuing appropriate touch events.
type SynthesizeTapGestureCommand struct {
	params *SynthesizeTapGestureParams
	cb     SynthesizeTapGestureCB
}

func NewSynthesizeTapGestureCommand(params *SynthesizeTapGestureParams, cb SynthesizeTapGestureCB) *SynthesizeTapGestureCommand {
	return &SynthesizeTapGestureCommand{
		params: params,
		cb:     cb,
	}
}

func (cmd *SynthesizeTapGestureCommand) Name() string {
	return "Input.synthesizeTapGesture"
}

func (cmd *SynthesizeTapGestureCommand) Params() interface{} {
	return cmd.params
}

func (cmd *SynthesizeTapGestureCommand) Done(result []byte, err error) {
	if cmd.cb != nil {
		cmd.cb(err)
	}
}
